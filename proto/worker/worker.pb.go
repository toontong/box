// Code generated by protoc-gen-go.
// source: worker.proto
// DO NOT EDIT!

/*
Package worker is a generated protocol buffer package.

It is generated from these files:
	worker.proto

It has these top-level messages:
	AddReq
	AddResp
*/
package worker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type AddReq struct {
	A int64 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B int64 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
}

func (m *AddReq) Reset()                    { *m = AddReq{} }
func (m *AddReq) String() string            { return proto.CompactTextString(m) }
func (*AddReq) ProtoMessage()               {}
func (*AddReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AddResp struct {
	Sum int64 `protobuf:"varint,1,opt,name=sum" json:"sum,omitempty"`
}

func (m *AddResp) Reset()                    { *m = AddResp{} }
func (m *AddResp) String() string            { return proto.CompactTextString(m) }
func (*AddResp) ProtoMessage()               {}
func (*AddResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*AddReq)(nil), "worker.AddReq")
	proto.RegisterType((*AddResp)(nil), "worker.AddResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Wroker service

type WrokerClient interface {
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error)
}

type wrokerClient struct {
	cc *grpc.ClientConn
}

func NewWrokerClient(cc *grpc.ClientConn) WrokerClient {
	return &wrokerClient{cc}
}

func (c *wrokerClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := grpc.Invoke(ctx, "/worker.Wroker/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wroker service

type WrokerServer interface {
	Add(context.Context, *AddReq) (*AddResp, error)
}

func RegisterWrokerServer(s *grpc.Server, srv WrokerServer) {
	s.RegisterService(&_Wroker_serviceDesc, srv)
}

func _Wroker_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(WrokerServer).Add(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Wroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "worker.Wroker",
	HandlerType: (*WrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Wroker_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xcf, 0x2f, 0xca,
	0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x54, 0xb8, 0xd8,
	0x1c, 0x53, 0x52, 0x82, 0x52, 0x0b, 0x85, 0x78, 0xb8, 0x18, 0x13, 0x25, 0x18, 0x15, 0x18, 0x35,
	0x98, 0x83, 0x18, 0x13, 0x41, 0xbc, 0x24, 0x09, 0x26, 0x08, 0x2f, 0x49, 0x49, 0x9a, 0x8b, 0x1d,
	0xac, 0xaa, 0xb8, 0x40, 0x48, 0x80, 0x8b, 0xb9, 0xb8, 0x34, 0x17, 0xaa, 0x10, 0xc4, 0x34, 0x32,
	0xe2, 0x62, 0x0b, 0x2f, 0xca, 0x07, 0x1a, 0x26, 0xa4, 0xc1, 0xc5, 0x0c, 0x54, 0x26, 0xc4, 0xa7,
	0x07, 0xb5, 0x0a, 0x62, 0xb2, 0x14, 0x3f, 0x0a, 0xbf, 0xb8, 0x40, 0x89, 0xc1, 0x49, 0x8e, 0x8b,
	0x3f, 0x33, 0x5f, 0xaf, 0x24, 0x3f, 0x3f, 0xaf, 0x24, 0x3f, 0x2f, 0x5d, 0x2f, 0x29, 0xbf, 0xc2,
	0x89, 0xd3, 0x29, 0xbf, 0x22, 0x1c, 0xac, 0x2e, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x4a, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x95, 0xd4, 0x23, 0xb5, 0x00, 0x00, 0x00,
}
